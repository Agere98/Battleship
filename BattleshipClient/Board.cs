using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace BattleshipClient {

    /// <summary>
    /// Base game board functionality
    /// </summary>
    public class Board {

        public enum Tile { Empty, Hit, Miss, Ship }

        private bool active;

        protected readonly Resources resources;
        protected Grid grid;
        protected (Tile tile, Button button)[,] board;

        public int Height { get; }
        public int Width { get; }
        public bool IsActive {
            get => active;
            set {
                active = value;
                for (int i = 0; i < Height; i++) {
                    for (int j = 0; j < Width; j++) {
                        if (board[i, j].tile == Tile.Empty) {
                            board[i, j].button.IsEnabled = active;
                        }
                    }
                }
                if (active) Activate();
                else Deactivate();
            }
        }

        /// <summary>
        /// Creates a board
        /// </summary>
        /// <param name="height">Number of rows</param>
        /// <param name="width">Number of columns</param>
        public Board(int height, int width) {
            Height = height;
            Width = width;
            resources = new Resources();
            resources.InitializeComponent();
            Generate();
        }

        /// <summary>
        /// Gets the UI grid of this board
        /// </summary>
        /// <returns>The UI Grid generated by this board</returns>
        public Grid GetGrid() {
            return grid;
        }

        /// <summary>
        /// Gets the content of a tile
        /// </summary>
        /// <param name="row">Row number of the requested tile</param>
        /// <param name="column">Column number of the requested tile</param>
        /// <returns>Enumeration representing the content of requested tile</returns>
        public Tile GetTile(int row, int column) {
            return board[row, column].tile;
        }

        /// <summary>
        /// Sets the content of a tile
        /// </summary>
        /// <param name="row">Row number of the requested tile</param>
        /// <param name="column">Column number of the requested tile</param>
        /// <param name="content">The content to assign to the requested tile</param>
        public virtual void SetTile(int row, int column, Tile content) {
            board[row, column].tile = content;
        }

        protected virtual void Activate() { }

        protected virtual void Deactivate() { }

        private void Generate() {
            var background = resources["BoardBackground"] as SolidColorBrush;
            var tileStyle = resources["BoardTile"] as Style;
            var tile_empty = resources["Tile_Empty"] as ImageSource;

            board = new (Tile, Button)[Height, Width];
            grid = new Grid {
                Background = background
            };
            for (int i = 0; i < Height; i++) {
                var row = new RowDefinition();
                grid.RowDefinitions.Add(row);
            }
            for (int j = 0; j < Width; j++) {
                var column = new ColumnDefinition();
                grid.ColumnDefinitions.Add(column);
            }
            for (int i = 0; i < Height; i++) {
                for (int j = 0; j < Width; j++) {
                    Image image = new Image {
                        Source = tile_empty
                    };
                    Button button = new Button {
                        Style = tileStyle,
                        Content = image,
                        IsEnabled = false
                    };
                    Grid.SetRow(button, i);
                    Grid.SetColumn(button, j);
                    grid.Children.Add(button);
                    board[i, j].button = button;
                }
            }
        }
    }
}
